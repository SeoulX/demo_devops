name: CI/CD Pileline

on:
  push:
    branches:
      - feature-branch
  pull_request:
    branches:
      - feature-branch

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python 3.12
      uses: actions/setup-python@v2
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m venv .venv
        source .venv/bin/activate
        cd backend
        pip install -r requirements.txt

    - name: Run tests FastAPI
      run: |
        source .venv/bin/activate
        pytest 
    
    - name: Setup tests NextJS
      uses: actions/setup-node@v2
      with:
        node-version: '18'

    - name: Install dependencies NextJS
      run: |
        cd frontend
        npm install
    
    - name: Run tests NextJS
      run: |
        cd frontend
        npm run test
  
  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set environment variables
        run: |
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> $GITHUB_ENV
          echo "EC2_HOST=${{ secrets.EC2_HOST }}" >> $GITHUB_ENV

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
          docker compose version

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Images with Compose
        run: |
          docker-compose -f docker-compose.yml build --pull --no-cache
          docker-compose -f docker-compose.yml push

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to AWS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            sudo yum update -y
            sudo yum install -y docker
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker ec2-user
            
            if ! command -v docker-compose &> /dev/null
            then
              sudo curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              docker-compose version
            fi

            echo '${{ secrets.DOCKER_PASSWORD }}' | docker login -u '${{ secrets.DOCKER_USERNAME }}' --password-stdin
            docker ps -aq | xargs -r docker stop | xargs -r docker rm
            docker system prune -a -f
            docker pull ${{ secrets.DOCKER_USERNAME }}/demo-exam-app:backend
            docker pull ${{ secrets.DOCKER_USERNAME }}/demo-exam-app:frontend

            docker run -d --name backend -p 8000:8000 ${{ secrets.DOCKER_USERNAME }}/demo-exam-app:backend

            echo "Creating .env file for Next.js..."
            echo "NEXT_PUBLIC_API_URL=http://${{ secrets.EC2_HOST }}:8000" > .env

            docker run -d --name frontend -p 3000:3000 --env-file .env \
            ${{ secrets.DOCKER_USERNAME }}/demo-exam-app:frontend
   
            docker ps -a

